syntax = "proto3";

package Ui;

import "fs/filesystem.proto";
import "rpc_common.proto";

service Ui
{
	// fs operations
	rpc GetObjectPath(rpc_common.Hash) returns (Path);
	rpc RevealObjectInExplorer(rpc_common.Hash) returns (rpc_common.Empty);
	rpc ImportObjectFromDisk(ObjectFromDiskOptions) returns (fs.ObjectList);
	rpc ImportObjectToContainer(ObjectFromDiskOptions) returns (rpc_common.Guid);

	// tracker interaction
	rpc PublishToTracker(PublishingOptions) returns (rpc_common.Empty);
	rpc SearchForObjects(SearchRequest) returns (SearchResponseList);
	rpc GetDataUsage(UsageRequest) returns (rpc_common.DataUsage);

	// container queries
	rpc GetAllContainers(rpc_common.Empty) returns (rpc_common.GuidList);
	rpc GetContainerObjects(rpc_common.Guid) returns (fs.ObjectList);
	rpc GetContainerRootHash(rpc_common.Guid) returns (rpc_common.Hash);

	// download management
	rpc DownloadContainer(DownloadContainerOptions) returns (rpc_common.Empty);
	rpc PauseFileDownload(rpc_common.Hash) returns (rpc_common.Empty);
	rpc ResumeFileDownload(rpc_common.Hash) returns (rpc_common.Empty);
	rpc GetDownloadProgress(rpc_common.Hash) returns (Progress);

	// block list
	rpc ModifyBlockListEntry(BlockListRequest) returns (rpc_common.Empty);
	rpc GetBlockList(rpc_common.Empty) returns (BlockListResponse);

	// utils
	rpc LogMessage(LogRequest) returns (rpc_common.Empty);
	rpc RevealLogFile(rpc_common.Empty) returns (rpc_common.Empty);
	rpc Shutdown(rpc_common.Empty) returns (rpc_common.Empty);

	// fs
	rpc ApplyFsOperation(FsOperation) returns (rpc_common.Empty);
}

message ObjectOptions
{
	bool pickFolder = 1;
}

message Progress
{
	int64 current = 1;
	int64 total = 2;
}

message Path
{
	string path = 1;
}

message String
{
	string value = 1;
}

message ObjectFromDiskOptions
{
	string path = 1;
	int32 chunkSize = 2;
}

message PublishingOptions
{
	string containerGuid = 1;
	string trackerUri = 2;
}

message DownloadContainerOptions
{
	string containerGuid = 1;
	string trackerUri = 2;
	string destinationDir = 3;
	int32 maxConcurrentChunks = 4;
}

message SearchRequest
{
	string trackerUri = 1;
	string query = 2;
}

message UsageRequest
{
	string trackerUri = 1;
}

message SearchResponseList
{
	repeated rpc_common.SearchResponse results = 1;
}

message BlockListRequest
{
	string url = 1;
	bool inWhitelist = 2;
	bool shouldRemove = 3;
}

message BlockListEntry
{
	string url = 1;
	bool inWhitelist = 2;
}

message BlockListResponse
{
	repeated BlockListEntry entries = 1;
}

message FsOperation
{
	string containerGuid = 1;
	OperationType type = 2;
	rpc_common.Hash target = 3;
	rpc_common.Hash parent = 4;

	oneof info
	{
		string newName = 5; // for rename
	    rpc_common.Hash newParent = 6; // for move & copy
		fs.ObjectList objects = 7; // for create
		rpc_common.Empty empty = 8; // for others
	}

	optional string trackerUri = 9;
}

enum OperationType
{
	Copy = 0;
	Move = 1;
	Create = 2;
	Delete = 3;
	Rename = 4;
}

message LogRequest
{
	string message = 1;
	LogCategory category = 2;
}

enum LogCategory
{
	Info = 0;
	Warning = 1;
	Error = 2;
	Debug = 3;
	Trace = 4;
}
