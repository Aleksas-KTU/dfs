import { ChildProcess, spawn } from "child_process";
import { app, BrowserWindow, dialog, ipcMain } from "electron";
import getPort from "get-port";
import path from "path";
import installExtension, {
  REACT_DEVELOPER_TOOLS,
} from "electron-devtools-installer";
import { UiClient } from "@/types/rpc/uiservice.client";
import { GrpcTransport } from "@protobuf-ts/grpc-transport";
import { RpcMethodNames, RpcRequest, RpcResponse } from "@/global";
import { sleep } from "@/lib/utils";
import { ObjectList } from "@/types/fs/filesystem";
import { Path, Progress, SearchResponseList } from "@/types/rpc/uiservice";
import { Empty, GuidList, Guid, DataUsage, Hash } from "@/types/rpc_common";
import { ChannelCredentials } from "@grpc/grpc-js";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const isDev = !app.isPackaged || process.env.NODE_ENV === "development";
let port: number | undefined = undefined;
let grpcClient: UiClient | undefined = undefined;
let backendProcess: ChildProcess | undefined = undefined;

const createWindow = async (): Promise<void> => {
  port = !isDev ? await getPort() : 42069;
  if (!isDev) {
    const exePath = path.join(
      app.isPackaged ? process.resourcesPath : path.join(__dirname, "..", ".."),
      "assets",
      "node.exe",
    );
    backendProcess = spawn(exePath, [port.toString()], {
      detached: true,
      stdio: "inherit",
    });
  }

  grpcClient = new UiClient(
    new GrpcTransport({
      host: `localhost:${port}`,
      channelCredentials: ChannelCredentials.createInsecure(),
    }),
  );

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (isDev) mainWindow.webContents.openDevTools({ mode: "undocked" });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on("before-quit", async () => {
  try {
    await grpcClient?.shutdown({});
  } catch (e) {
    console.log("error: " + JSON.stringify(e));
  }
  await sleep(5000);
  backendProcess?.kill();
  backendProcess = undefined;
});

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

ipcMain.handle("select-file", async () => {
  const result = await dialog.showOpenDialog({
    properties: ["openFile"],
  });

  return result.canceled ? null : result.filePaths[0];
});

ipcMain.handle("select-folder", async () => {
  const result = await dialog.showOpenDialog({
    properties: ["openDirectory"],
  });

  return result.canceled ? null : result.filePaths[0];
});

if (isDev) {
  app.whenReady().then(async () => {
    await installExtension(REACT_DEVELOPER_TOOLS)
      .then((name) => console.log(`Added Extension:  ${name}`))
      .catch((err) => console.log("An error occurred: ", err));
  });
}
ipcMain.handle(
  "grpc-call",
  async (_event: Electron.IpcMainInvokeEvent, args: any) => {
    const { method, arg } = args;
    if (grpcClient == null || !(method in grpcClient)) {
      throw new Error("invalid grpc call");
    }

    const out = await callGrpc(method, arg);
    if (out == null) throw new Error("received invalid response");
    return out;
  },
);

export const responseSerializers = {
  getObjectPath: (msg: any) => Path.toBinary(msg),
  revealObjectInExplorer: (msg: any) => Empty.toBinary(msg),
  getAllContainers: (msg: any) => GuidList.toBinary(msg),
  getDownloadProgress: (msg: any) => Progress.toBinary(msg),
  getContainerObjects: (msg: any) => ObjectList.toBinary(msg),
  getContainerRootHash: (msg: any) => Hash.toBinary(msg),
  importObjectFromDisk: (msg: any) => Guid.toBinary(msg),
  publishToTracker: (msg: any) => Empty.toBinary(msg),
  downloadContainer: (msg: any) => Empty.toBinary(msg),
  pauseContainerDownload: (msg: any) => Empty.toBinary(msg),
  resumeContainerDownload: (msg: any) => Empty.toBinary(msg),
  searchForObjects: (msg: any) => SearchResponseList.toBinary(msg),
  getDataUsage: (msg: any) => DataUsage.toBinary(msg),
  shutdown: (msg: any) => Empty.toBinary(msg),
} satisfies Record<RpcMethodNames, (msg: any) => Uint8Array>;

async function callGrpc<_method extends RpcMethodNames>(
  method: _method,
  arg: RpcRequest<_method>,
): Promise<Uint8Array | undefined> {
  const client = grpcClient as any;
  const rpc = client[method] as Function;
  try {
    const res: RpcResponse<_method> = await rpc.call(client, arg).response;
    if (res != null) {
      return responseSerializers[method](res);
    } else {
      return undefined;
    }
  } catch (e) {
    console.log(JSON.stringify(e));
    throw e;
  }
}
