// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "rpc/node.proto" (package "node", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Node } from "./node";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ChunkResponse } from "./node";
import type { ChunkRequest } from "./node";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service node.Node
 */
export interface INodeClient {
  /**
   * @generated from protobuf rpc: GetChunk(node.ChunkRequest) returns (stream node.ChunkResponse);
   */
  getChunk(
    input: ChunkRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<ChunkRequest, ChunkResponse>;
}
/**
 * @generated from protobuf service node.Node
 */
export class NodeClient implements INodeClient, ServiceInfo {
  typeName = Node.typeName;
  methods = Node.methods;
  options = Node.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: GetChunk(node.ChunkRequest) returns (stream node.ChunkResponse);
   */
  getChunk(
    input: ChunkRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<ChunkRequest, ChunkResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ChunkRequest, ChunkResponse>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input,
    );
  }
}
