// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "rpc/tracker.proto" (package "tracker", syntax proto3)
// tslint:disable
import { DataUsage } from "../rpc_common";
import { SearchResponse } from "../rpc_common";
import { Guid } from "../rpc_common";
import { Empty } from "../rpc_common";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ObjectWithHash } from "../fs/filesystem";
import { Hash } from "../rpc_common";
/**
 * @generated from protobuf message tracker.ContainerRootHash
 */
export interface ContainerRootHash {
  /**
   * @generated from protobuf field: string guid = 1;
   */
  guid: string;
  /**
   * @generated from protobuf field: rpc_common.Hash hash = 2;
   */
  hash?: Hash;
  /**
   * @generated from protobuf field: string transactionGuid = 3;
   */
  transactionGuid: string;
}
/**
 * @generated from protobuf message tracker.PublishedObject
 */
export interface PublishedObject {
  /**
   * @generated from protobuf field: string transactionGuid = 1;
   */
  transactionGuid: string;
  /**
   * @generated from protobuf field: fs.ObjectWithHash object = 2;
   */
  object?: ObjectWithHash;
}
/**
 * @generated from protobuf message tracker.PeerRequest
 */
export interface PeerRequest {
  /**
   * @generated from protobuf field: bytes chunk_hash = 1;
   */
  chunkHash: Uint8Array;
  /**
   * @generated from protobuf field: int32 max_peer_count = 2;
   */
  maxPeerCount: number;
}
/**
 * @generated from protobuf message tracker.PeerResponse
 */
export interface PeerResponse {
  /**
   * @generated from protobuf field: string peer = 1;
   */
  peer: string;
}
/**
 * @generated from protobuf message tracker.MarkRequest
 */
export interface MarkRequest {
  /**
   * @generated from protobuf field: string peer = 1;
   */
  peer: string;
  /**
   * @generated from protobuf field: bytes hash = 2;
   */
  hash: Uint8Array;
}
/**
 * @generated from protobuf message tracker.SearchRequest
 */
export interface SearchRequest {
  /**
   * @generated from protobuf field: string query = 1;
   */
  query: string;
}
/**
 * @generated from protobuf message tracker.UsageReport
 */
export interface UsageReport {
  /**
   * @generated from protobuf field: bool is_upload = 1;
   */
  isUpload: boolean;
  /**
   * @generated from protobuf field: int64 bytes = 2;
   */
  bytes: bigint;
}
/**
 * @generated from protobuf message tracker.TransactionStartResponse
 */
export interface TransactionStartResponse {
  /**
   * @generated from protobuf field: string guid = 1;
   */
  guid: string;
  /**
   * @generated from protobuf field: int64 ttl_ms = 2;
   */
  ttlMs: bigint;
}
/**
 * @generated from protobuf message tracker.TransactionStateResponse
 */
export interface TransactionStateResponse {
  /**
   * @generated from protobuf field: tracker.TransactionState state = 1;
   */
  state: TransactionState;
}
/**
 * @generated from protobuf enum tracker.TransactionState
 */
export enum TransactionState {
  /**
   * @generated from protobuf enum value: Pending = 0;
   */
  Pending = 0,
  /**
   * @generated from protobuf enum value: Ok = 1;
   */
  Ok = 1,
  /**
   * @generated from protobuf enum value: Failed = 2;
   */
  Failed = 2,
  /**
   * @generated from protobuf enum value: Expired = 3;
   */
  Expired = 3,
}
// @generated message type with reflection information, may provide speed optimized methods
class ContainerRootHash$Type extends MessageType<ContainerRootHash> {
  constructor() {
    super("tracker.ContainerRootHash", [
      { no: 1, name: "guid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "hash", kind: "message", T: () => Hash },
      {
        no: 3,
        name: "transactionGuid",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<ContainerRootHash>): ContainerRootHash {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.guid = "";
    message.transactionGuid = "";
    if (value !== undefined)
      reflectionMergePartial<ContainerRootHash>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ContainerRootHash,
  ): ContainerRootHash {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string guid */ 1:
          message.guid = reader.string();
          break;
        case /* rpc_common.Hash hash */ 2:
          message.hash = Hash.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.hash,
          );
          break;
        case /* string transactionGuid */ 3:
          message.transactionGuid = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ContainerRootHash,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string guid = 1; */
    if (message.guid !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.guid);
    /* rpc_common.Hash hash = 2; */
    if (message.hash)
      Hash.internalBinaryWrite(
        message.hash,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* string transactionGuid = 3; */
    if (message.transactionGuid !== "")
      writer.tag(3, WireType.LengthDelimited).string(message.transactionGuid);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message tracker.ContainerRootHash
 */
export const ContainerRootHash = new ContainerRootHash$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublishedObject$Type extends MessageType<PublishedObject> {
  constructor() {
    super("tracker.PublishedObject", [
      {
        no: 1,
        name: "transactionGuid",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 2, name: "object", kind: "message", T: () => ObjectWithHash },
    ]);
  }
  create(value?: PartialMessage<PublishedObject>): PublishedObject {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.transactionGuid = "";
    if (value !== undefined)
      reflectionMergePartial<PublishedObject>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PublishedObject,
  ): PublishedObject {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string transactionGuid */ 1:
          message.transactionGuid = reader.string();
          break;
        case /* fs.ObjectWithHash object */ 2:
          message.object = ObjectWithHash.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.object,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PublishedObject,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string transactionGuid = 1; */
    if (message.transactionGuid !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.transactionGuid);
    /* fs.ObjectWithHash object = 2; */
    if (message.object)
      ObjectWithHash.internalBinaryWrite(
        message.object,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message tracker.PublishedObject
 */
export const PublishedObject = new PublishedObject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerRequest$Type extends MessageType<PeerRequest> {
  constructor() {
    super("tracker.PeerRequest", [
      { no: 1, name: "chunk_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
      {
        no: 2,
        name: "max_peer_count",
        kind: "scalar",
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<PeerRequest>): PeerRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.chunkHash = new Uint8Array(0);
    message.maxPeerCount = 0;
    if (value !== undefined)
      reflectionMergePartial<PeerRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PeerRequest,
  ): PeerRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bytes chunk_hash */ 1:
          message.chunkHash = reader.bytes();
          break;
        case /* int32 max_peer_count */ 2:
          message.maxPeerCount = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PeerRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* bytes chunk_hash = 1; */
    if (message.chunkHash.length)
      writer.tag(1, WireType.LengthDelimited).bytes(message.chunkHash);
    /* int32 max_peer_count = 2; */
    if (message.maxPeerCount !== 0)
      writer.tag(2, WireType.Varint).int32(message.maxPeerCount);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message tracker.PeerRequest
 */
export const PeerRequest = new PeerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerResponse$Type extends MessageType<PeerResponse> {
  constructor() {
    super("tracker.PeerResponse", [
      { no: 1, name: "peer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<PeerResponse>): PeerResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.peer = "";
    if (value !== undefined)
      reflectionMergePartial<PeerResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PeerResponse,
  ): PeerResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string peer */ 1:
          message.peer = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PeerResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string peer = 1; */
    if (message.peer !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.peer);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message tracker.PeerResponse
 */
export const PeerResponse = new PeerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkRequest$Type extends MessageType<MarkRequest> {
  constructor() {
    super("tracker.MarkRequest", [
      { no: 1, name: "peer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(value?: PartialMessage<MarkRequest>): MarkRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.peer = "";
    message.hash = new Uint8Array(0);
    if (value !== undefined)
      reflectionMergePartial<MarkRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: MarkRequest,
  ): MarkRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string peer */ 1:
          message.peer = reader.string();
          break;
        case /* bytes hash */ 2:
          message.hash = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: MarkRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string peer = 1; */
    if (message.peer !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.peer);
    /* bytes hash = 2; */
    if (message.hash.length)
      writer.tag(2, WireType.LengthDelimited).bytes(message.hash);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message tracker.MarkRequest
 */
export const MarkRequest = new MarkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchRequest$Type extends MessageType<SearchRequest> {
  constructor() {
    super("tracker.SearchRequest", [
      { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<SearchRequest>): SearchRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.query = "";
    if (value !== undefined)
      reflectionMergePartial<SearchRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SearchRequest,
  ): SearchRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string query */ 1:
          message.query = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SearchRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string query = 1; */
    if (message.query !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.query);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message tracker.SearchRequest
 */
export const SearchRequest = new SearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UsageReport$Type extends MessageType<UsageReport> {
  constructor() {
    super("tracker.UsageReport", [
      { no: 1, name: "is_upload", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
      {
        no: 2,
        name: "bytes",
        kind: "scalar",
        T: 3 /*ScalarType.INT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<UsageReport>): UsageReport {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.isUpload = false;
    message.bytes = 0n;
    if (value !== undefined)
      reflectionMergePartial<UsageReport>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: UsageReport,
  ): UsageReport {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bool is_upload */ 1:
          message.isUpload = reader.bool();
          break;
        case /* int64 bytes */ 2:
          message.bytes = reader.int64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: UsageReport,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* bool is_upload = 1; */
    if (message.isUpload !== false)
      writer.tag(1, WireType.Varint).bool(message.isUpload);
    /* int64 bytes = 2; */
    if (message.bytes !== 0n)
      writer.tag(2, WireType.Varint).int64(message.bytes);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message tracker.UsageReport
 */
export const UsageReport = new UsageReport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransactionStartResponse$Type extends MessageType<TransactionStartResponse> {
  constructor() {
    super("tracker.TransactionStartResponse", [
      { no: 1, name: "guid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "ttl_ms",
        kind: "scalar",
        T: 3 /*ScalarType.INT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<TransactionStartResponse>,
  ): TransactionStartResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.guid = "";
    message.ttlMs = 0n;
    if (value !== undefined)
      reflectionMergePartial<TransactionStartResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: TransactionStartResponse,
  ): TransactionStartResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string guid */ 1:
          message.guid = reader.string();
          break;
        case /* int64 ttl_ms */ 2:
          message.ttlMs = reader.int64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: TransactionStartResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string guid = 1; */
    if (message.guid !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.guid);
    /* int64 ttl_ms = 2; */
    if (message.ttlMs !== 0n)
      writer.tag(2, WireType.Varint).int64(message.ttlMs);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message tracker.TransactionStartResponse
 */
export const TransactionStartResponse = new TransactionStartResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransactionStateResponse$Type extends MessageType<TransactionStateResponse> {
  constructor() {
    super("tracker.TransactionStateResponse", [
      {
        no: 1,
        name: "state",
        kind: "enum",
        T: () => ["tracker.TransactionState", TransactionState],
      },
    ]);
  }
  create(
    value?: PartialMessage<TransactionStateResponse>,
  ): TransactionStateResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.state = 0;
    if (value !== undefined)
      reflectionMergePartial<TransactionStateResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: TransactionStateResponse,
  ): TransactionStateResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* tracker.TransactionState state */ 1:
          message.state = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: TransactionStateResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* tracker.TransactionState state = 1; */
    if (message.state !== 0)
      writer.tag(1, WireType.Varint).int32(message.state);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message tracker.TransactionStateResponse
 */
export const TransactionStateResponse = new TransactionStateResponse$Type();
/**
 * @generated ServiceType for protobuf service tracker.Tracker
 */
export const Tracker = new ServiceType("tracker.Tracker", [
  {
    name: "GetObjectTree",
    serverStreaming: true,
    options: {},
    I: Hash,
    O: ObjectWithHash,
  },
  {
    name: "MarkReachable",
    clientStreaming: true,
    options: {},
    I: MarkRequest,
    O: Empty,
  },
  {
    name: "MarkUnreachable",
    clientStreaming: true,
    options: {},
    I: MarkRequest,
    O: Empty,
  },
  {
    name: "GetPeerList",
    serverStreaming: true,
    options: {},
    I: PeerRequest,
    O: PeerResponse,
  },
  { name: "GetContainerRootHash", options: {}, I: Guid, O: Hash },
  { name: "SetContainerRootHash", options: {}, I: ContainerRootHash, O: Empty },
  {
    name: "Publish",
    clientStreaming: true,
    options: {},
    I: PublishedObject,
    O: Empty,
  },
  {
    name: "StartTransaction",
    options: {},
    I: Empty,
    O: TransactionStartResponse,
  },
  {
    name: "CheckTransactionState",
    options: {},
    I: Guid,
    O: TransactionStateResponse,
  },
  {
    name: "SearchForObjects",
    serverStreaming: true,
    options: {},
    I: SearchRequest,
    O: SearchResponse,
  },
  { name: "GetDataUsage", options: {}, I: Empty, O: DataUsage },
  { name: "ReportDataUsage", options: {}, I: UsageReport, O: Empty },
]);
