// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "rpc/node.proto" (package "node", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message node.ChunkRequest
 */
export interface ChunkRequest {
  /**
   * @generated from protobuf field: bytes hash = 1;
   */
  hash: Uint8Array;
  /**
   * @generated from protobuf field: string trackerUri = 2;
   */
  trackerUri: string;
}
/**
 * @generated from protobuf message node.ChunkResponse
 */
export interface ChunkResponse {
  /**
   * @generated from protobuf field: bytes response = 1;
   */
  response: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class ChunkRequest$Type extends MessageType<ChunkRequest> {
  constructor() {
    super("node.ChunkRequest", [
      { no: 1, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
      { no: 2, name: "trackerUri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<ChunkRequest>): ChunkRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.hash = new Uint8Array(0);
    message.trackerUri = "";
    if (value !== undefined)
      reflectionMergePartial<ChunkRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ChunkRequest,
  ): ChunkRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bytes hash */ 1:
          message.hash = reader.bytes();
          break;
        case /* string trackerUri */ 2:
          message.trackerUri = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ChunkRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* bytes hash = 1; */
    if (message.hash.length)
      writer.tag(1, WireType.LengthDelimited).bytes(message.hash);
    /* string trackerUri = 2; */
    if (message.trackerUri !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.trackerUri);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message node.ChunkRequest
 */
export const ChunkRequest = new ChunkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChunkResponse$Type extends MessageType<ChunkResponse> {
  constructor() {
    super("node.ChunkResponse", [
      { no: 1, name: "response", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(value?: PartialMessage<ChunkResponse>): ChunkResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.response = new Uint8Array(0);
    if (value !== undefined)
      reflectionMergePartial<ChunkResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ChunkResponse,
  ): ChunkResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bytes response */ 1:
          message.response = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ChunkResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* bytes response = 1; */
    if (message.response.length)
      writer.tag(1, WireType.LengthDelimited).bytes(message.response);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message node.ChunkResponse
 */
export const ChunkResponse = new ChunkResponse$Type();
/**
 * @generated ServiceType for protobuf service node.Node
 */
export const Node = new ServiceType("node.Node", [
  {
    name: "GetChunk",
    serverStreaming: true,
    options: {},
    I: ChunkRequest,
    O: ChunkResponse,
  },
]);
