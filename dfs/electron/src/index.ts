import { spawn } from "child_process";
import { app, BrowserWindow, dialog, ipcMain } from "electron";
import getPort from "get-port";
import { Socket } from "net";
import path from "path";
import { GetNodeService } from "./IpcService/NodeServiceClient";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

async function waitForPortOpen(
  port: number,
  retries: number,
  delay: number,
): Promise<void> {
  let attempts = 0;

  return new Promise((resolve, reject) => {
    const tryConnect = () => {
      const socket = new Socket();

      socket
        .once("connect", () => {
          socket.destroy();
          resolve();
        })
        .once("error", () => {
          socket.destroy();
          if (++attempts >= retries) {
            reject(new Error(`gRPC backend failed to start on port ${port}`));
          } else {
            setTimeout(tryConnect, delay);
          }
        })
        .connect(port, "127.0.0.1");
    };

    tryConnect();
  });
}

const createWindow = async (): Promise<void> => {
  const port = await getPort();
  const exePath = path.join(
    app.isPackaged ? process.resourcesPath : path.join(__dirname, "..", ".."),
    "assets",
    "node.exe",
  );
  spawn(exePath, [port.toString()], {
    detached: true,
    stdio: "inherit",
  });

  await waitForPortOpen(port, 100, 100);
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on("before-quit", async () => {
  const client = await GetNodeService();
  await client.Shutdown();
});

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

ipcMain.handle("select-file", async () => {
  const result = await dialog.showOpenDialog({
    properties: ["openFile"],
  });

  return result.canceled ? null : result.filePaths[0];
});

ipcMain.handle("select-folder", async () => {
  const result = await dialog.showOpenDialog({
    properties: ["openDirectory"],
  });

  return result.canceled ? null : result.filePaths[0];
});
