// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "fs/filesystem.proto" (package "fs", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message fs.FileSystemObject
 */
export interface FileSystemObject {
  /**
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * @generated from protobuf oneof: type
   */
  type:
    | {
        oneofKind: "file";
        /**
         * @generated from protobuf field: fs.File file = 3;
         */
        file: File;
      }
    | {
        oneofKind: "directory";
        /**
         * @generated from protobuf field: fs.Directory directory = 4;
         */
        directory: Directory;
      }
    | {
        oneofKind: "link";
        /**
         * @generated from protobuf field: fs.Link link = 5;
         */
        link: Link;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message fs.File
 */
export interface File {
  /**
   * @generated from protobuf field: int64 size = 1;
   */
  size: bigint;
  /**
   * @generated from protobuf field: fs.ChunkHashes hashes = 2;
   */
  hashes?: ChunkHashes;
}
/**
 * @generated from protobuf message fs.ChunkHashes
 */
export interface ChunkHashes {
  /**
   * @generated from protobuf field: int32 chunkSize = 1;
   */
  chunkSize: number;
  /**
   * @generated from protobuf field: repeated bytes hash = 2;
   */
  hash: Uint8Array[];
}
/**
 * @generated from protobuf message fs.Directory
 */
export interface Directory {
  /**
   * @generated from protobuf field: repeated bytes entries = 1;
   */
  entries: Uint8Array[];
}
/**
 * @generated from protobuf message fs.Link
 */
export interface Link {
  /**
   * @generated from protobuf field: string target_path = 1;
   */
  targetPath: string; // (for now) we can't target hashes in some cases (e.g., linking to ancestor causes a cycle), so this will have to do
}
/**
 * @generated from protobuf message fs.ObjectWithHash
 */
export interface ObjectWithHash {
  /**
   * @generated from protobuf field: fs.FileSystemObject object = 1;
   */
  object?: FileSystemObject;
  /**
   * @generated from protobuf field: bytes hash = 2;
   */
  hash: Uint8Array;
}
/**
 * @generated from protobuf message fs.ObjectList
 */
export interface ObjectList {
  /**
   * @generated from protobuf field: repeated fs.ObjectWithHash data = 1;
   */
  data: ObjectWithHash[];
}
// @generated message type with reflection information, may provide speed optimized methods
class FileSystemObject$Type extends MessageType<FileSystemObject> {
  constructor() {
    super("fs.FileSystemObject", [
      { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: "file", kind: "message", oneof: "type", T: () => File },
      {
        no: 4,
        name: "directory",
        kind: "message",
        oneof: "type",
        T: () => Directory,
      },
      { no: 5, name: "link", kind: "message", oneof: "type", T: () => Link },
    ]);
  }
  create(value?: PartialMessage<FileSystemObject>): FileSystemObject {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.name = "";
    message.type = { oneofKind: undefined };
    if (value !== undefined)
      reflectionMergePartial<FileSystemObject>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: FileSystemObject,
  ): FileSystemObject {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* fs.File file */ 3:
          message.type = {
            oneofKind: "file",
            file: File.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.type as any).file,
            ),
          };
          break;
        case /* fs.Directory directory */ 4:
          message.type = {
            oneofKind: "directory",
            directory: Directory.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.type as any).directory,
            ),
          };
          break;
        case /* fs.Link link */ 5:
          message.type = {
            oneofKind: "link",
            link: Link.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.type as any).link,
            ),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: FileSystemObject,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* fs.File file = 3; */
    if (message.type.oneofKind === "file")
      File.internalBinaryWrite(
        message.type.file,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* fs.Directory directory = 4; */
    if (message.type.oneofKind === "directory")
      Directory.internalBinaryWrite(
        message.type.directory,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* fs.Link link = 5; */
    if (message.type.oneofKind === "link")
      Link.internalBinaryWrite(
        message.type.link,
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message fs.FileSystemObject
 */
export const FileSystemObject = new FileSystemObject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class File$Type extends MessageType<File> {
  constructor() {
    super("fs.File", [
      {
        no: 1,
        name: "size",
        kind: "scalar",
        T: 3 /*ScalarType.INT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      { no: 2, name: "hashes", kind: "message", T: () => ChunkHashes },
    ]);
  }
  create(value?: PartialMessage<File>): File {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.size = 0n;
    if (value !== undefined) reflectionMergePartial<File>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: File,
  ): File {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int64 size */ 1:
          message.size = reader.int64().toBigInt();
          break;
        case /* fs.ChunkHashes hashes */ 2:
          message.hashes = ChunkHashes.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.hashes,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: File,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* int64 size = 1; */
    if (message.size !== 0n) writer.tag(1, WireType.Varint).int64(message.size);
    /* fs.ChunkHashes hashes = 2; */
    if (message.hashes)
      ChunkHashes.internalBinaryWrite(
        message.hashes,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message fs.File
 */
export const File = new File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChunkHashes$Type extends MessageType<ChunkHashes> {
  constructor() {
    super("fs.ChunkHashes", [
      { no: 1, name: "chunkSize", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
      {
        no: 2,
        name: "hash",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 12 /*ScalarType.BYTES*/,
      },
    ]);
  }
  create(value?: PartialMessage<ChunkHashes>): ChunkHashes {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.chunkSize = 0;
    message.hash = [];
    if (value !== undefined)
      reflectionMergePartial<ChunkHashes>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ChunkHashes,
  ): ChunkHashes {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* int32 chunkSize */ 1:
          message.chunkSize = reader.int32();
          break;
        case /* repeated bytes hash */ 2:
          message.hash.push(reader.bytes());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ChunkHashes,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* int32 chunkSize = 1; */
    if (message.chunkSize !== 0)
      writer.tag(1, WireType.Varint).int32(message.chunkSize);
    /* repeated bytes hash = 2; */
    for (let i = 0; i < message.hash.length; i++)
      writer.tag(2, WireType.LengthDelimited).bytes(message.hash[i]);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message fs.ChunkHashes
 */
export const ChunkHashes = new ChunkHashes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Directory$Type extends MessageType<Directory> {
  constructor() {
    super("fs.Directory", [
      {
        no: 1,
        name: "entries",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 12 /*ScalarType.BYTES*/,
      },
    ]);
  }
  create(value?: PartialMessage<Directory>): Directory {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.entries = [];
    if (value !== undefined)
      reflectionMergePartial<Directory>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Directory,
  ): Directory {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated bytes entries */ 1:
          message.entries.push(reader.bytes());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Directory,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated bytes entries = 1; */
    for (let i = 0; i < message.entries.length; i++)
      writer.tag(1, WireType.LengthDelimited).bytes(message.entries[i]);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message fs.Directory
 */
export const Directory = new Directory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Link$Type extends MessageType<Link> {
  constructor() {
    super("fs.Link", [
      {
        no: 1,
        name: "target_path",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<Link>): Link {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.targetPath = "";
    if (value !== undefined) reflectionMergePartial<Link>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Link,
  ): Link {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string target_path */ 1:
          message.targetPath = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Link,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string target_path = 1; */
    if (message.targetPath !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.targetPath);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message fs.Link
 */
export const Link = new Link$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObjectWithHash$Type extends MessageType<ObjectWithHash> {
  constructor() {
    super("fs.ObjectWithHash", [
      { no: 1, name: "object", kind: "message", T: () => FileSystemObject },
      { no: 2, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(value?: PartialMessage<ObjectWithHash>): ObjectWithHash {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.hash = new Uint8Array(0);
    if (value !== undefined)
      reflectionMergePartial<ObjectWithHash>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ObjectWithHash,
  ): ObjectWithHash {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* fs.FileSystemObject object */ 1:
          message.object = FileSystemObject.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.object,
          );
          break;
        case /* bytes hash */ 2:
          message.hash = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ObjectWithHash,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* fs.FileSystemObject object = 1; */
    if (message.object)
      FileSystemObject.internalBinaryWrite(
        message.object,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* bytes hash = 2; */
    if (message.hash.length)
      writer.tag(2, WireType.LengthDelimited).bytes(message.hash);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message fs.ObjectWithHash
 */
export const ObjectWithHash = new ObjectWithHash$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObjectList$Type extends MessageType<ObjectList> {
  constructor() {
    super("fs.ObjectList", [
      {
        no: 1,
        name: "data",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ObjectWithHash,
      },
    ]);
  }
  create(value?: PartialMessage<ObjectList>): ObjectList {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.data = [];
    if (value !== undefined)
      reflectionMergePartial<ObjectList>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ObjectList,
  ): ObjectList {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated fs.ObjectWithHash data */ 1:
          message.data.push(
            ObjectWithHash.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ObjectList,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated fs.ObjectWithHash data = 1; */
    for (let i = 0; i < message.data.length; i++)
      ObjectWithHash.internalBinaryWrite(
        message.data[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message fs.ObjectList
 */
export const ObjectList = new ObjectList$Type();
