/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: filesystem.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace fs {
  export class FileSystemObject extends pb_1.Message {
    #one_of_decls: number[][] = [[3, 4, 5]];
    constructor(
      data?:
        | any[]
        | ({
            name?: string;
          } & (
            | {
                file?: File;
                directory?: never;
                link?: never;
              }
            | {
                file?: never;
                directory?: Directory;
                link?: never;
              }
            | {
                file?: never;
                directory?: never;
                link?: Link;
              }
          )),
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("name" in data && data.name != undefined) {
          this.name = data.name;
        }
        if ("file" in data && data.file != undefined) {
          this.file = data.file;
        }
        if ("directory" in data && data.directory != undefined) {
          this.directory = data.directory;
        }
        if ("link" in data && data.link != undefined) {
          this.link = data.link;
        }
      }
    }
    get name() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get file() {
      return pb_1.Message.getWrapperField(this, File, 3) as File;
    }
    set file(value: File) {
      pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_file() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get directory() {
      return pb_1.Message.getWrapperField(this, Directory, 4) as Directory;
    }
    set directory(value: Directory) {
      pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_directory() {
      return pb_1.Message.getField(this, 4) != null;
    }
    get link() {
      return pb_1.Message.getWrapperField(this, Link, 5) as Link;
    }
    set link(value: Link) {
      pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_link() {
      return pb_1.Message.getField(this, 5) != null;
    }
    get type() {
      const cases: {
        [index: number]: "none" | "file" | "directory" | "link";
      } = {
        0: "none",
        3: "file",
        4: "directory",
        5: "link",
      };
      return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5])];
    }
    static fromObject(data: {
      name?: string;
      file?: ReturnType<typeof File.prototype.toObject>;
      directory?: ReturnType<typeof Directory.prototype.toObject>;
      link?: ReturnType<typeof Link.prototype.toObject>;
    }): FileSystemObject {
      const message = new FileSystemObject({});
      if (data.name != null) {
        message.name = data.name;
      }
      if (data.file != null) {
        message.file = File.fromObject(data.file);
      }
      if (data.directory != null) {
        message.directory = Directory.fromObject(data.directory);
      }
      if (data.link != null) {
        message.link = Link.fromObject(data.link);
      }
      return message;
    }
    toObject() {
      const data: {
        name?: string;
        file?: ReturnType<typeof File.prototype.toObject>;
        directory?: ReturnType<typeof Directory.prototype.toObject>;
        link?: ReturnType<typeof Link.prototype.toObject>;
      } = {};
      if (this.name != null) {
        data.name = this.name;
      }
      if (this.file != null) {
        data.file = this.file.toObject();
      }
      if (this.directory != null) {
        data.directory = this.directory.toObject();
      }
      if (this.link != null) {
        data.link = this.link.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.name.length) writer.writeString(1, this.name);
      if (this.has_file)
        writer.writeMessage(3, this.file, () => this.file.serialize(writer));
      if (this.has_directory)
        writer.writeMessage(4, this.directory, () =>
          this.directory.serialize(writer),
        );
      if (this.has_link)
        writer.writeMessage(5, this.link, () => this.link.serialize(writer));
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): FileSystemObject {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new FileSystemObject();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.name = reader.readString();
            break;
          case 3:
            reader.readMessage(
              message.file,
              () => (message.file = File.deserialize(reader)),
            );
            break;
          case 4:
            reader.readMessage(
              message.directory,
              () => (message.directory = Directory.deserialize(reader)),
            );
            break;
          case 5:
            reader.readMessage(
              message.link,
              () => (message.link = Link.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FileSystemObject {
      return FileSystemObject.deserialize(bytes);
    }
  }
  export class File extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            size?: number;
            hashes?: ChunkHashes;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("size" in data && data.size != undefined) {
          this.size = data.size;
        }
        if ("hashes" in data && data.hashes != undefined) {
          this.hashes = data.hashes;
        }
      }
    }
    get size() {
      return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set size(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get hashes() {
      return pb_1.Message.getWrapperField(this, ChunkHashes, 2) as ChunkHashes;
    }
    set hashes(value: ChunkHashes) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_hashes() {
      return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
      size?: number;
      hashes?: ReturnType<typeof ChunkHashes.prototype.toObject>;
    }): File {
      const message = new File({});
      if (data.size != null) {
        message.size = data.size;
      }
      if (data.hashes != null) {
        message.hashes = ChunkHashes.fromObject(data.hashes);
      }
      return message;
    }
    toObject() {
      const data: {
        size?: number;
        hashes?: ReturnType<typeof ChunkHashes.prototype.toObject>;
      } = {};
      if (this.size != null) {
        data.size = this.size;
      }
      if (this.hashes != null) {
        data.hashes = this.hashes.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.size != 0) writer.writeInt64(1, this.size);
      if (this.has_hashes)
        writer.writeMessage(2, this.hashes, () =>
          this.hashes.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): File {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new File();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.size = reader.readInt64();
            break;
          case 2:
            reader.readMessage(
              message.hashes,
              () => (message.hashes = ChunkHashes.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): File {
      return File.deserialize(bytes);
    }
  }
  export class ChunkHashes extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            chunkSize?: number;
            hash?: Uint8Array[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [2],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("chunkSize" in data && data.chunkSize != undefined) {
          this.chunkSize = data.chunkSize;
        }
        if ("hash" in data && data.hash != undefined) {
          this.hash = data.hash;
        }
      }
    }
    get chunkSize() {
      return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set chunkSize(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get hash() {
      return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
    }
    set hash(value: Uint8Array[]) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      chunkSize?: number;
      hash?: Uint8Array[];
    }): ChunkHashes {
      const message = new ChunkHashes({});
      if (data.chunkSize != null) {
        message.chunkSize = data.chunkSize;
      }
      if (data.hash != null) {
        message.hash = data.hash;
      }
      return message;
    }
    toObject() {
      const data: {
        chunkSize?: number;
        hash?: Uint8Array[];
      } = {};
      if (this.chunkSize != null) {
        data.chunkSize = this.chunkSize;
      }
      if (this.hash != null) {
        data.hash = this.hash;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.chunkSize != 0) writer.writeInt32(1, this.chunkSize);
      if (this.hash.length) writer.writeRepeatedBytes(2, this.hash);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChunkHashes {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new ChunkHashes();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.chunkSize = reader.readInt32();
            break;
          case 2:
            pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChunkHashes {
      return ChunkHashes.deserialize(bytes);
    }
  }
  export class Directory extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            entries?: Uint8Array[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("entries" in data && data.entries != undefined) {
          this.entries = data.entries;
        }
      }
    }
    get entries() {
      return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
    }
    set entries(value: Uint8Array[]) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { entries?: Uint8Array[] }): Directory {
      const message = new Directory({});
      if (data.entries != null) {
        message.entries = data.entries;
      }
      return message;
    }
    toObject() {
      const data: {
        entries?: Uint8Array[];
      } = {};
      if (this.entries != null) {
        data.entries = this.entries;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.entries.length) writer.writeRepeatedBytes(1, this.entries);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Directory {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Directory();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Directory {
      return Directory.deserialize(bytes);
    }
  }
  export class Link extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            target_path?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("target_path" in data && data.target_path != undefined) {
          this.target_path = data.target_path;
        }
      }
    }
    get target_path() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set target_path(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { target_path?: string }): Link {
      const message = new Link({});
      if (data.target_path != null) {
        message.target_path = data.target_path;
      }
      return message;
    }
    toObject() {
      const data: {
        target_path?: string;
      } = {};
      if (this.target_path != null) {
        data.target_path = this.target_path;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.target_path.length) writer.writeString(1, this.target_path);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Link {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Link();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.target_path = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Link {
      return Link.deserialize(bytes);
    }
  }
  export class ObjectWithHash extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            object?: FileSystemObject;
            hash?: Uint8Array;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("object" in data && data.object != undefined) {
          this.object = data.object;
        }
        if ("hash" in data && data.hash != undefined) {
          this.hash = data.hash;
        }
      }
    }
    get object() {
      return pb_1.Message.getWrapperField(
        this,
        FileSystemObject,
        1,
      ) as FileSystemObject;
    }
    set object(value: FileSystemObject) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_object() {
      return pb_1.Message.getField(this, 1) != null;
    }
    get hash() {
      return pb_1.Message.getFieldWithDefault(
        this,
        2,
        new Uint8Array(0),
      ) as Uint8Array;
    }
    set hash(value: Uint8Array) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      object?: ReturnType<typeof FileSystemObject.prototype.toObject>;
      hash?: Uint8Array;
    }): ObjectWithHash {
      const message = new ObjectWithHash({});
      if (data.object != null) {
        message.object = FileSystemObject.fromObject(data.object);
      }
      if (data.hash != null) {
        message.hash = data.hash;
      }
      return message;
    }
    toObject() {
      const data: {
        object?: ReturnType<typeof FileSystemObject.prototype.toObject>;
        hash?: Uint8Array;
      } = {};
      if (this.object != null) {
        data.object = this.object.toObject();
      }
      if (this.hash != null) {
        data.hash = this.hash;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_object)
        writer.writeMessage(1, this.object, () =>
          this.object.serialize(writer),
        );
      if (this.hash.length) writer.writeBytes(2, this.hash);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ObjectWithHash {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new ObjectWithHash();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.object,
              () => (message.object = FileSystemObject.deserialize(reader)),
            );
            break;
          case 2:
            message.hash = reader.readBytes();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ObjectWithHash {
      return ObjectWithHash.deserialize(bytes);
    }
  }
  export class ObjectArray extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            data?: ObjectWithHash[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == "object") {
        if ("data" in data && data.data != undefined) {
          this.data = data.data;
        }
      }
    }
    get data() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        ObjectWithHash,
        1,
      ) as ObjectWithHash[];
    }
    set data(value: ObjectWithHash[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
      data?: ReturnType<typeof ObjectWithHash.prototype.toObject>[];
    }): ObjectArray {
      const message = new ObjectArray({});
      if (data.data != null) {
        message.data = data.data.map((item) => ObjectWithHash.fromObject(item));
      }
      return message;
    }
    toObject() {
      const data: {
        data?: ReturnType<typeof ObjectWithHash.prototype.toObject>[];
      } = {};
      if (this.data != null) {
        data.data = this.data.map((item: ObjectWithHash) => item.toObject());
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.data.length)
        writer.writeRepeatedMessage(1, this.data, (item: ObjectWithHash) =>
          item.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ObjectArray {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new ObjectArray();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.data, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                ObjectWithHash.deserialize(reader),
                ObjectWithHash,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ObjectArray {
      return ObjectArray.deserialize(bytes);
    }
  }
}
